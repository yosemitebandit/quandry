"""Isolating piece images by cropping them to their outlines.

Makes use of data generated by the 'analyze' script.

Usage:
  crop.py <image-filepath> <piece-data-filepath> [--outdir=<outdir>]

Arguments:
  <image-filepath>  path to the piece image
  <piece-data-filepath>  path to the piece data json file

Options:
  --outdir=<outdir>  where to save enhanced images
"""

import json
import os

from docopt import docopt
import numpy as np
from PIL import Image
from shapely.geometry import Point
from shapely.geometry import Polygon


if __name__ == '__main__':
  args = docopt(__doc__)

  # Load the image and the piece data.
  image = Image.open(args['<image-filepath>']).convert('RGBA')
  with open(args['<piece-data-filepath>']) as piece_data_file:
    piece_data = json.loads(piece_data_file.read())

  # Define the piece's outline as a shapely polygon.
  outline_polygon = Polygon(piece_data['outline'])

  # Analyze each pixel in the image.
  pixels = np.array(image)
  for index, pixel in np.ndenumerate(pixels):
    row, col, channel = index
    if channel != 0:
      continue
    # Have to do some weirdness with row/col arrangements to account for numpy
    # vs PIL pixel numbering.
    point = Point(col, -row)
    if not outline_polygon.contains(point):
      pixels[(row, col, 0)] = 255
      pixels[(row, col, 1)] = 255
      pixels[(row, col, 2)] = 255
      pixels[(row, col, 3)] = 0

  # Save the output.
  out_image = Image.fromarray(pixels)
  extensionless_filename = args['<image-filepath>'].split('.')[0]
  outpath = '%s-cropped.png' % extensionless_filename
  if args['--outdir']:
    outpath = os.path.join(args['--outdir'], outpath)
    savedir = os.path.dirname(outpath)
    if not os.path.exists(savedir):
      os.makedirs(savedir)
  out_image.save(outpath)
